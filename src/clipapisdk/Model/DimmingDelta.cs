/*
 * Hue CLIP API
 *
 * See [openhue/openhue-api](https://github.com/openhue/openhue-api)
 *
 * The version of the OpenAPI document: v2
 * Contact: contact@openhue.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = clipapisdk.Client.OpenAPIDateConverter;

namespace clipapisdk.Model
{
    /// <summary>
    /// DimmingDelta
    /// </summary>
    [DataContract(Name = "DimmingDelta")]
    public partial class DimmingDelta : IValidatableObject
    {
        /// <summary>
        /// Defines Action
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum Up for value: up
            /// </summary>
            [EnumMember(Value = "up")]
            Up = 1,

            /// <summary>
            /// Enum Down for value: down
            /// </summary>
            [EnumMember(Value = "down")]
            Down = 2,

            /// <summary>
            /// Enum Stop for value: stop
            /// </summary>
            [EnumMember(Value = "stop")]
            Stop = 3
        }


        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DimmingDelta" /> class.
        /// </summary>
        /// <param name="action">action.</param>
        /// <param name="brightnessDelta">Brightness percentage of full-scale increase delta to current dimlevel. Clip at Max-level or Min-level. .</param>
        public DimmingDelta(ActionEnum? action = default(ActionEnum?), decimal brightnessDelta = default(decimal))
        {
            this.Action = action;
            this.BrightnessDelta = brightnessDelta;
        }

        /// <summary>
        /// Brightness percentage of full-scale increase delta to current dimlevel. Clip at Max-level or Min-level. 
        /// </summary>
        /// <value>Brightness percentage of full-scale increase delta to current dimlevel. Clip at Max-level or Min-level. </value>
        [DataMember(Name = "brightness_delta", EmitDefaultValue = false)]
        public decimal BrightnessDelta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DimmingDelta {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  BrightnessDelta: ").Append(BrightnessDelta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BrightnessDelta (decimal) maximum
            if (this.BrightnessDelta > (decimal)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BrightnessDelta, must be a value less than or equal to 100.", new [] { "BrightnessDelta" });
            }

            // BrightnessDelta (decimal) minimum
            if (this.BrightnessDelta < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BrightnessDelta, must be a value greater than or equal to 0.", new [] { "BrightnessDelta" });
            }

            yield break;
        }
    }

}
