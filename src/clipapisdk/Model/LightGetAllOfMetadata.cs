/*
 * Hue CLIP API
 *
 * See [openhue/openhue-api](https://github.com/openhue/openhue-api)
 *
 * The version of the OpenAPI document: v2
 * Contact: contact@openhue.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = clipapisdk.Client.OpenAPIDateConverter;

namespace clipapisdk.Model
{
    /// <summary>
    /// Deprecated, use metadata on device level
    /// </summary>
    [DataContract(Name = "LightGet_allOf_metadata")]
    public partial class LightGetAllOfMetadata : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Archetype
        /// </summary>
        [DataMember(Name = "archetype", EmitDefaultValue = false)]
        public LightArchetype? Archetype { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LightGetAllOfMetadata" /> class.
        /// </summary>
        /// <param name="name">Human readable name of a resource.</param>
        /// <param name="archetype">archetype.</param>
        /// <param name="fixedMired">A fixed mired value of the white lamp.</param>
        public LightGetAllOfMetadata(string name = default(string), LightArchetype? archetype = default(LightArchetype?), int fixedMired = default(int))
        {
            this.Name = name;
            this.Archetype = archetype;
            this.FixedMired = fixedMired;
        }

        /// <summary>
        /// Human readable name of a resource
        /// </summary>
        /// <value>Human readable name of a resource</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// A fixed mired value of the white lamp
        /// </summary>
        /// <value>A fixed mired value of the white lamp</value>
        [DataMember(Name = "fixed_mired", EmitDefaultValue = false)]
        public int FixedMired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LightGetAllOfMetadata {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Archetype: ").Append(Archetype).Append("\n");
            sb.Append("  FixedMired: ").Append(FixedMired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FixedMired (int) maximum
            if (this.FixedMired > (int)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FixedMired, must be a value less than or equal to 100.", new [] { "FixedMired" });
            }

            // FixedMired (int) minimum
            if (this.FixedMired < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FixedMired, must be a value greater than or equal to 0.", new [] { "FixedMired" });
            }

            yield break;
        }
    }

}
