/*
 * Hue CLIP API
 *
 * See [openhue/openhue-api](https://github.com/openhue/openhue-api)
 *
 * The version of the OpenAPI document: v2
 * Contact: contact@openhue.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = clipapisdk.Client.OpenAPIDateConverter;

namespace clipapisdk.Model
{
    /// <summary>
    /// SceneRecall
    /// </summary>
    [DataContract(Name = "SceneRecall")]
    public partial class SceneRecall : IValidatableObject
    {
        /// <summary>
        /// When writing active, the actions in the scene are executed on the target. dynamic_palette starts dynamic scene with colors in the Palette object.
        /// </summary>
        /// <value>When writing active, the actions in the scene are executed on the target. dynamic_palette starts dynamic scene with colors in the Palette object.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            [EnumMember(Value = "active")]
            Active = 1,

            /// <summary>
            /// Enum DynamicPalette for value: dynamic_palette
            /// </summary>
            [EnumMember(Value = "dynamic_palette")]
            DynamicPalette = 2,

            /// <summary>
            /// Enum Static for value: static
            /// </summary>
            [EnumMember(Value = "static")]
            Static = 3
        }


        /// <summary>
        /// When writing active, the actions in the scene are executed on the target. dynamic_palette starts dynamic scene with colors in the Palette object.
        /// </summary>
        /// <value>When writing active, the actions in the scene are executed on the target. dynamic_palette starts dynamic scene with colors in the Palette object.</value>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SceneRecall" /> class.
        /// </summary>
        /// <param name="action">When writing active, the actions in the scene are executed on the target. dynamic_palette starts dynamic scene with colors in the Palette object..</param>
        /// <param name="duration">Transition to the scene within the timeframe given by duration.</param>
        /// <param name="dimming">dimming.</param>
        public SceneRecall(ActionEnum? action = default(ActionEnum?), int duration = default(int), Dimming dimming = default(Dimming))
        {
            this.Action = action;
            this.Duration = duration;
            this.Dimming = dimming;
        }

        /// <summary>
        /// Transition to the scene within the timeframe given by duration
        /// </summary>
        /// <value>Transition to the scene within the timeframe given by duration</value>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public int Duration { get; set; }

        /// <summary>
        /// Gets or Sets Dimming
        /// </summary>
        [DataMember(Name = "dimming", EmitDefaultValue = false)]
        public Dimming Dimming { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SceneRecall {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Dimming: ").Append(Dimming).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
