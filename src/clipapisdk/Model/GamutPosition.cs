/*
 * Hue CLIP API
 *
 * See [openhue/openhue-api](https://github.com/openhue/openhue-api)
 *
 * The version of the OpenAPI document: v2
 * Contact: contact@openhue.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = clipapisdk.Client.OpenAPIDateConverter;

namespace clipapisdk.Model
{
    /// <summary>
    /// CIE XY gamut position
    /// </summary>
    [DataContract(Name = "GamutPosition")]
    public partial class GamutPosition : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GamutPosition" /> class.
        /// </summary>
        /// <param name="x">X position in color gamut.</param>
        /// <param name="y">y position in color gamut.</param>
        public GamutPosition(decimal x = default(decimal), decimal y = default(decimal))
        {
            this.X = x;
            this.Y = y;
        }

        /// <summary>
        /// X position in color gamut
        /// </summary>
        /// <value>X position in color gamut</value>
        [DataMember(Name = "x", EmitDefaultValue = false)]
        public decimal X { get; set; }

        /// <summary>
        /// y position in color gamut
        /// </summary>
        /// <value>y position in color gamut</value>
        [DataMember(Name = "y", EmitDefaultValue = false)]
        public decimal Y { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GamutPosition {\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // X (decimal) maximum
            if (this.X > (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for X, must be a value less than or equal to 1.", new [] { "X" });
            }

            // X (decimal) minimum
            if (this.X < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for X, must be a value greater than or equal to 0.", new [] { "X" });
            }

            // Y (decimal) maximum
            if (this.Y > (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Y, must be a value less than or equal to 1.", new [] { "Y" });
            }

            // Y (decimal) minimum
            if (this.Y < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Y, must be a value greater than or equal to 0.", new [] { "Y" });
            }

            yield break;
        }
    }

}
