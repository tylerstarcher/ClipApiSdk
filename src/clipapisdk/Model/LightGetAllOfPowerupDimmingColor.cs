/*
 * Hue CLIP API
 *
 * See [openhue/openhue-api](https://github.com/openhue/openhue-api)
 *
 * The version of the OpenAPI document: v2
 * Contact: contact@openhue.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = clipapisdk.Client.OpenAPIDateConverter;

namespace clipapisdk.Model
{
    /// <summary>
    /// LightGetAllOfPowerupDimmingColor
    /// </summary>
    [DataContract(Name = "LightGet_allOf_powerup_dimming_color")]
    public partial class LightGetAllOfPowerupDimmingColor : IValidatableObject
    {
        /// <summary>
        /// State to activate after powerup. Availability of “color_temperature” and “color” modes depend on the capabilities of the lamp. Colortemperature will set the colortemperature to the specified value after power up. When setting color_temperature, the color_temperature property must be included Color will set the color tot he specified value after power up. When setting color mode, the color property must be included Previous will set color to the state it was in before powering off.
        /// </summary>
        /// <value>State to activate after powerup. Availability of “color_temperature” and “color” modes depend on the capabilities of the lamp. Colortemperature will set the colortemperature to the specified value after power up. When setting color_temperature, the color_temperature property must be included Color will set the color tot he specified value after power up. When setting color mode, the color property must be included Previous will set color to the state it was in before powering off.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            /// <summary>
            /// Enum ColorTemperature for value: color_temperature
            /// </summary>
            [EnumMember(Value = "color_temperature")]
            ColorTemperature = 1,

            /// <summary>
            /// Enum Color for value: color
            /// </summary>
            [EnumMember(Value = "color")]
            Color = 2,

            /// <summary>
            /// Enum Previous for value: previous
            /// </summary>
            [EnumMember(Value = "previous")]
            Previous = 3
        }


        /// <summary>
        /// State to activate after powerup. Availability of “color_temperature” and “color” modes depend on the capabilities of the lamp. Colortemperature will set the colortemperature to the specified value after power up. When setting color_temperature, the color_temperature property must be included Color will set the color tot he specified value after power up. When setting color mode, the color property must be included Previous will set color to the state it was in before powering off.
        /// </summary>
        /// <value>State to activate after powerup. Availability of “color_temperature” and “color” modes depend on the capabilities of the lamp. Colortemperature will set the colortemperature to the specified value after power up. When setting color_temperature, the color_temperature property must be included Color will set the color tot he specified value after power up. When setting color mode, the color property must be included Previous will set color to the state it was in before powering off.</value>
        [DataMember(Name = "mode", EmitDefaultValue = false)]
        public ModeEnum? Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LightGetAllOfPowerupDimmingColor" /> class.
        /// </summary>
        /// <param name="mode">State to activate after powerup. Availability of “color_temperature” and “color” modes depend on the capabilities of the lamp. Colortemperature will set the colortemperature to the specified value after power up. When setting color_temperature, the color_temperature property must be included Color will set the color tot he specified value after power up. When setting color mode, the color property must be included Previous will set color to the state it was in before powering off..</param>
        /// <param name="colorTemperature">colorTemperature.</param>
        public LightGetAllOfPowerupDimmingColor(ModeEnum? mode = default(ModeEnum?), LightGetAllOfPowerupDimmingColorColorTemperature colorTemperature = default(LightGetAllOfPowerupDimmingColorColorTemperature))
        {
            this.Mode = mode;
            this.ColorTemperature = colorTemperature;
        }

        /// <summary>
        /// Gets or Sets ColorTemperature
        /// </summary>
        [DataMember(Name = "color_temperature", EmitDefaultValue = false)]
        public LightGetAllOfPowerupDimmingColorColorTemperature ColorTemperature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LightGetAllOfPowerupDimmingColor {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  ColorTemperature: ").Append(ColorTemperature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
