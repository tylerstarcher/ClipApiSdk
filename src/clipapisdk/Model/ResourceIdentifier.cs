/*
 * Hue CLIP API
 *
 * See [openhue/openhue-api](https://github.com/openhue/openhue-api)
 *
 * The version of the OpenAPI document: v2
 * Contact: contact@openhue.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = clipapisdk.Client.OpenAPIDateConverter;

namespace clipapisdk.Model
{
    /// <summary>
    /// ResourceIdentifier
    /// </summary>
    [DataContract(Name = "ResourceIdentifier")]
    public partial class ResourceIdentifier : IValidatableObject
    {
        /// <summary>
        /// The type of the referenced resource
        /// </summary>
        /// <value>The type of the referenced resource</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RtypeEnum
        {
            /// <summary>
            /// Enum Device for value: device
            /// </summary>
            [EnumMember(Value = "device")]
            Device = 1,

            /// <summary>
            /// Enum BridgeHome for value: bridge_home
            /// </summary>
            [EnumMember(Value = "bridge_home")]
            BridgeHome = 2,

            /// <summary>
            /// Enum Room for value: room
            /// </summary>
            [EnumMember(Value = "room")]
            Room = 3,

            /// <summary>
            /// Enum Zone for value: zone
            /// </summary>
            [EnumMember(Value = "zone")]
            Zone = 4,

            /// <summary>
            /// Enum Light for value: light
            /// </summary>
            [EnumMember(Value = "light")]
            Light = 5,

            /// <summary>
            /// Enum Button for value: button
            /// </summary>
            [EnumMember(Value = "button")]
            Button = 6,

            /// <summary>
            /// Enum RelativeRotary for value: relative_rotary
            /// </summary>
            [EnumMember(Value = "relative_rotary")]
            RelativeRotary = 7,

            /// <summary>
            /// Enum Temperature for value: temperature
            /// </summary>
            [EnumMember(Value = "temperature")]
            Temperature = 8,

            /// <summary>
            /// Enum LightLevel for value: light_level
            /// </summary>
            [EnumMember(Value = "light_level")]
            LightLevel = 9,

            /// <summary>
            /// Enum Motion for value: motion
            /// </summary>
            [EnumMember(Value = "motion")]
            Motion = 10,

            /// <summary>
            /// Enum CameraMotion for value: camera_motion
            /// </summary>
            [EnumMember(Value = "camera_motion")]
            CameraMotion = 11,

            /// <summary>
            /// Enum Entertainment for value: entertainment
            /// </summary>
            [EnumMember(Value = "entertainment")]
            Entertainment = 12,

            /// <summary>
            /// Enum Contact for value: contact
            /// </summary>
            [EnumMember(Value = "contact")]
            Contact = 13,

            /// <summary>
            /// Enum Tamper for value: tamper
            /// </summary>
            [EnumMember(Value = "tamper")]
            Tamper = 14,

            /// <summary>
            /// Enum GroupedLight for value: grouped_light
            /// </summary>
            [EnumMember(Value = "grouped_light")]
            GroupedLight = 15,

            /// <summary>
            /// Enum DevicePower for value: device_power
            /// </summary>
            [EnumMember(Value = "device_power")]
            DevicePower = 16,

            /// <summary>
            /// Enum ZigbeeBridgeConnectivity for value: zigbee_bridge_connectivity
            /// </summary>
            [EnumMember(Value = "zigbee_bridge_connectivity")]
            ZigbeeBridgeConnectivity = 17,

            /// <summary>
            /// Enum ZigbeeConnectivity for value: zigbee_connectivity
            /// </summary>
            [EnumMember(Value = "zigbee_connectivity")]
            ZigbeeConnectivity = 18,

            /// <summary>
            /// Enum ZgpConnectivity for value: zgp_connectivity
            /// </summary>
            [EnumMember(Value = "zgp_connectivity")]
            ZgpConnectivity = 19,

            /// <summary>
            /// Enum Bridge for value: bridge
            /// </summary>
            [EnumMember(Value = "bridge")]
            Bridge = 20,

            /// <summary>
            /// Enum ZigbeeDeviceDiscovery for value: zigbee_device_discovery
            /// </summary>
            [EnumMember(Value = "zigbee_device_discovery")]
            ZigbeeDeviceDiscovery = 21,

            /// <summary>
            /// Enum Homekit for value: homekit
            /// </summary>
            [EnumMember(Value = "homekit")]
            Homekit = 22,

            /// <summary>
            /// Enum Matter for value: matter
            /// </summary>
            [EnumMember(Value = "matter")]
            Matter = 23,

            /// <summary>
            /// Enum MatterFabric for value: matter_fabric
            /// </summary>
            [EnumMember(Value = "matter_fabric")]
            MatterFabric = 24,

            /// <summary>
            /// Enum Scene for value: scene
            /// </summary>
            [EnumMember(Value = "scene")]
            Scene = 25,

            /// <summary>
            /// Enum EntertainmentConfiguration for value: entertainment_configuration
            /// </summary>
            [EnumMember(Value = "entertainment_configuration")]
            EntertainmentConfiguration = 26,

            /// <summary>
            /// Enum PublicImage for value: public_image
            /// </summary>
            [EnumMember(Value = "public_image")]
            PublicImage = 27,

            /// <summary>
            /// Enum AuthV1 for value: auth_v1
            /// </summary>
            [EnumMember(Value = "auth_v1")]
            AuthV1 = 28,

            /// <summary>
            /// Enum BehaviorScript for value: behavior_script
            /// </summary>
            [EnumMember(Value = "behavior_script")]
            BehaviorScript = 29,

            /// <summary>
            /// Enum BehaviorInstance for value: behavior_instance
            /// </summary>
            [EnumMember(Value = "behavior_instance")]
            BehaviorInstance = 30,

            /// <summary>
            /// Enum Geofence for value: geofence
            /// </summary>
            [EnumMember(Value = "geofence")]
            Geofence = 31,

            /// <summary>
            /// Enum GeofenceClient for value: geofence_client
            /// </summary>
            [EnumMember(Value = "geofence_client")]
            GeofenceClient = 32,

            /// <summary>
            /// Enum Geolocation for value: geolocation
            /// </summary>
            [EnumMember(Value = "geolocation")]
            Geolocation = 33,

            /// <summary>
            /// Enum SmartScene for value: smart_scene
            /// </summary>
            [EnumMember(Value = "smart_scene")]
            SmartScene = 34
        }


        /// <summary>
        /// The type of the referenced resource
        /// </summary>
        /// <value>The type of the referenced resource</value>
        [DataMember(Name = "rtype", EmitDefaultValue = false)]
        public RtypeEnum? Rtype { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceIdentifier" /> class.
        /// </summary>
        /// <param name="rid">The unique id of the referenced resource.</param>
        /// <param name="rtype">The type of the referenced resource.</param>
        public ResourceIdentifier(string rid = default(string), RtypeEnum? rtype = default(RtypeEnum?))
        {
            this.Rid = rid;
            this.Rtype = rtype;
        }

        /// <summary>
        /// The unique id of the referenced resource
        /// </summary>
        /// <value>The unique id of the referenced resource</value>
        /// <example>42edd1f5-9538-4180-9ced-2d9e07f26d0f</example>
        [DataMember(Name = "rid", EmitDefaultValue = false)]
        public string Rid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResourceIdentifier {\n");
            sb.Append("  Rid: ").Append(Rid).Append("\n");
            sb.Append("  Rtype: ").Append(Rtype).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Rid != null) {
                // Rid (string) pattern
                Regex regexRid = new Regex(@"^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$", RegexOptions.CultureInvariant);
                if (!regexRid.Match(this.Rid).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rid, must match a pattern of " + regexRid, new [] { "Rid" });
                }
            }

            yield break;
        }
    }

}
