/*
 * Hue CLIP API
 *
 * See [openhue/openhue-api](https://github.com/openhue/openhue-api)
 *
 * The version of the OpenAPI document: v2
 * Contact: contact@openhue.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = clipapisdk.Client.OpenAPIDateConverter;

namespace clipapisdk.Model
{
    /// <summary>
    /// Feature containing signaling properties.
    /// </summary>
    [DataContract(Name = "LightGet_allOf_signaling")]
    public partial class LightGetAllOfSignaling : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LightGetAllOfSignaling" /> class.
        /// </summary>
        /// <param name="signalValues">signalValues.</param>
        /// <param name="estimatedEnd">Timestamp indicating when the active signal is expected to end. Value is not set if there is no_signal.</param>
        /// <param name="colors">Colors that were provided for the active effect..</param>
        public LightGetAllOfSignaling(List<SupportedSignals> signalValues = default(List<SupportedSignals>), int estimatedEnd = default(int), List<Color> colors = default(List<Color>))
        {
            this.SignalValues = signalValues;
            this.EstimatedEnd = estimatedEnd;
            this.Colors = colors;
        }

        /// <summary>
        /// Gets or Sets SignalValues
        /// </summary>
        [DataMember(Name = "signal_values", EmitDefaultValue = false)]
        public List<SupportedSignals> SignalValues { get; set; }

        /// <summary>
        /// Timestamp indicating when the active signal is expected to end. Value is not set if there is no_signal
        /// </summary>
        /// <value>Timestamp indicating when the active signal is expected to end. Value is not set if there is no_signal</value>
        [DataMember(Name = "estimated_end", EmitDefaultValue = false)]
        public int EstimatedEnd { get; set; }

        /// <summary>
        /// Colors that were provided for the active effect.
        /// </summary>
        /// <value>Colors that were provided for the active effect.</value>
        [DataMember(Name = "colors", EmitDefaultValue = false)]
        public List<Color> Colors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LightGetAllOfSignaling {\n");
            sb.Append("  SignalValues: ").Append(SignalValues).Append("\n");
            sb.Append("  EstimatedEnd: ").Append(EstimatedEnd).Append("\n");
            sb.Append("  Colors: ").Append(Colors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
