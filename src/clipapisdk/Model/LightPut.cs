/*
 * Hue CLIP API
 *
 * See [openhue/openhue-api](https://github.com/openhue/openhue-api)
 *
 * The version of the OpenAPI document: v2
 * Contact: contact@openhue.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = clipapisdk.Client.OpenAPIDateConverter;

namespace clipapisdk.Model
{
    /// <summary>
    /// LightPut
    /// </summary>
    [DataContract(Name = "LightPut")]
    public partial class LightPut : IValidatableObject
    {
        /// <summary>
        /// Defines Mode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            /// <summary>
            /// Enum Normal for value: normal
            /// </summary>
            [EnumMember(Value = "normal")]
            Normal = 1,

            /// <summary>
            /// Enum Streaming for value: streaming
            /// </summary>
            [EnumMember(Value = "streaming")]
            Streaming = 2
        }


        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name = "mode", EmitDefaultValue = false)]
        public ModeEnum? Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LightPut" /> class.
        /// </summary>
        /// <param name="type">Type of the supported resources (always &#x60;light&#x60; here).</param>
        /// <param name="on">on.</param>
        /// <param name="dimming">dimming.</param>
        /// <param name="dimmingDelta">dimmingDelta.</param>
        /// <param name="colorTemperature">colorTemperature.</param>
        /// <param name="colorTemperatureDelta">colorTemperatureDelta.</param>
        /// <param name="color">color.</param>
        /// <param name="dynamics">dynamics.</param>
        /// <param name="alert">alert.</param>
        /// <param name="signaling">signaling.</param>
        /// <param name="mode">mode.</param>
        /// <param name="gradient">gradient.</param>
        /// <param name="effects">effects.</param>
        /// <param name="timedEffects">timedEffects.</param>
        /// <param name="powerup">powerup.</param>
        public LightPut(string type = default(string), On on = default(On), Dimming dimming = default(Dimming), DimmingDelta dimmingDelta = default(DimmingDelta), ColorTemperature colorTemperature = default(ColorTemperature), ColorTemperatureDelta colorTemperatureDelta = default(ColorTemperatureDelta), Color color = default(Color), Dynamics dynamics = default(Dynamics), Alert alert = default(Alert), Signaling signaling = default(Signaling), ModeEnum? mode = default(ModeEnum?), Gradient gradient = default(Gradient), Effects effects = default(Effects), LightPutTimedEffects timedEffects = default(LightPutTimedEffects), Powerup powerup = default(Powerup))
        {
            this.Type = type;
            this.On = on;
            this.Dimming = dimming;
            this.DimmingDelta = dimmingDelta;
            this.ColorTemperature = colorTemperature;
            this.ColorTemperatureDelta = colorTemperatureDelta;
            this.Color = color;
            this.Dynamics = dynamics;
            this.Alert = alert;
            this.Signaling = signaling;
            this.Mode = mode;
            this.Gradient = gradient;
            this.Effects = effects;
            this.TimedEffects = timedEffects;
            this.Powerup = powerup;
        }

        /// <summary>
        /// Type of the supported resources (always &#x60;light&#x60; here)
        /// </summary>
        /// <value>Type of the supported resources (always &#x60;light&#x60; here)</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets On
        /// </summary>
        [DataMember(Name = "on", EmitDefaultValue = false)]
        public On On { get; set; }

        /// <summary>
        /// Gets or Sets Dimming
        /// </summary>
        [DataMember(Name = "dimming", EmitDefaultValue = false)]
        public Dimming Dimming { get; set; }

        /// <summary>
        /// Gets or Sets DimmingDelta
        /// </summary>
        [DataMember(Name = "dimming_delta", EmitDefaultValue = false)]
        public DimmingDelta DimmingDelta { get; set; }

        /// <summary>
        /// Gets or Sets ColorTemperature
        /// </summary>
        [DataMember(Name = "color_temperature", EmitDefaultValue = false)]
        public ColorTemperature ColorTemperature { get; set; }

        /// <summary>
        /// Gets or Sets ColorTemperatureDelta
        /// </summary>
        [DataMember(Name = "color_temperature_delta", EmitDefaultValue = false)]
        public ColorTemperatureDelta ColorTemperatureDelta { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name = "color", EmitDefaultValue = false)]
        public Color Color { get; set; }

        /// <summary>
        /// Gets or Sets Dynamics
        /// </summary>
        [DataMember(Name = "dynamics", EmitDefaultValue = false)]
        public Dynamics Dynamics { get; set; }

        /// <summary>
        /// Gets or Sets Alert
        /// </summary>
        [DataMember(Name = "alert", EmitDefaultValue = false)]
        public Alert Alert { get; set; }

        /// <summary>
        /// Gets or Sets Signaling
        /// </summary>
        [DataMember(Name = "signaling", EmitDefaultValue = false)]
        public Signaling Signaling { get; set; }

        /// <summary>
        /// Gets or Sets Gradient
        /// </summary>
        [DataMember(Name = "gradient", EmitDefaultValue = false)]
        public Gradient Gradient { get; set; }

        /// <summary>
        /// Gets or Sets Effects
        /// </summary>
        [DataMember(Name = "effects", EmitDefaultValue = false)]
        public Effects Effects { get; set; }

        /// <summary>
        /// Gets or Sets TimedEffects
        /// </summary>
        [DataMember(Name = "timed_effects", EmitDefaultValue = false)]
        public LightPutTimedEffects TimedEffects { get; set; }

        /// <summary>
        /// Gets or Sets Powerup
        /// </summary>
        [DataMember(Name = "powerup", EmitDefaultValue = false)]
        public Powerup Powerup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LightPut {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  On: ").Append(On).Append("\n");
            sb.Append("  Dimming: ").Append(Dimming).Append("\n");
            sb.Append("  DimmingDelta: ").Append(DimmingDelta).Append("\n");
            sb.Append("  ColorTemperature: ").Append(ColorTemperature).Append("\n");
            sb.Append("  ColorTemperatureDelta: ").Append(ColorTemperatureDelta).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Dynamics: ").Append(Dynamics).Append("\n");
            sb.Append("  Alert: ").Append(Alert).Append("\n");
            sb.Append("  Signaling: ").Append(Signaling).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Gradient: ").Append(Gradient).Append("\n");
            sb.Append("  Effects: ").Append(Effects).Append("\n");
            sb.Append("  TimedEffects: ").Append(TimedEffects).Append("\n");
            sb.Append("  Powerup: ").Append(Powerup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
