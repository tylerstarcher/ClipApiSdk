/*
 * Hue CLIP API
 *
 * See [openhue/openhue-api](https://github.com/openhue/openhue-api)
 *
 * The version of the OpenAPI document: v2
 * Contact: contact@openhue.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = clipapisdk.Client.OpenAPIDateConverter;

namespace clipapisdk.Model
{
    /// <summary>
    /// Feature containing properties to configure powerup behaviour of a lightsource.
    /// </summary>
    [DataContract(Name = "LightGet_allOf_powerup")]
    public partial class LightGetAllOfPowerup : IValidatableObject
    {
        /// <summary>
        /// When setting the custom preset the additional properties can be set. For all other presets, no other properties can be included.
        /// </summary>
        /// <value>When setting the custom preset the additional properties can be set. For all other presets, no other properties can be included.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PresetEnum
        {
            /// <summary>
            /// Enum Safety for value: safety
            /// </summary>
            [EnumMember(Value = "safety")]
            Safety = 1,

            /// <summary>
            /// Enum Powerfail for value: powerfail
            /// </summary>
            [EnumMember(Value = "powerfail")]
            Powerfail = 2,

            /// <summary>
            /// Enum LastOnState for value: last_on_state
            /// </summary>
            [EnumMember(Value = "last_on_state")]
            LastOnState = 3,

            /// <summary>
            /// Enum Custom for value: custom
            /// </summary>
            [EnumMember(Value = "custom")]
            Custom = 4
        }


        /// <summary>
        /// When setting the custom preset the additional properties can be set. For all other presets, no other properties can be included.
        /// </summary>
        /// <value>When setting the custom preset the additional properties can be set. For all other presets, no other properties can be included.</value>
        [DataMember(Name = "preset", EmitDefaultValue = false)]
        public PresetEnum? Preset { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LightGetAllOfPowerup" /> class.
        /// </summary>
        /// <param name="preset">When setting the custom preset the additional properties can be set. For all other presets, no other properties can be included..</param>
        /// <param name="configured">Indicates if the shown values have been configured in the lightsource..</param>
        /// <param name="on">on.</param>
        /// <param name="dimming">dimming.</param>
        public LightGetAllOfPowerup(PresetEnum? preset = default(PresetEnum?), bool configured = default(bool), LightGetAllOfPowerupOn on = default(LightGetAllOfPowerupOn), LightGetAllOfPowerupDimming dimming = default(LightGetAllOfPowerupDimming))
        {
            this.Preset = preset;
            this.Configured = configured;
            this.On = on;
            this.Dimming = dimming;
        }

        /// <summary>
        /// Indicates if the shown values have been configured in the lightsource.
        /// </summary>
        /// <value>Indicates if the shown values have been configured in the lightsource.</value>
        [DataMember(Name = "configured", EmitDefaultValue = true)]
        public bool Configured { get; set; }

        /// <summary>
        /// Gets or Sets On
        /// </summary>
        [DataMember(Name = "on", EmitDefaultValue = false)]
        public LightGetAllOfPowerupOn On { get; set; }

        /// <summary>
        /// Gets or Sets Dimming
        /// </summary>
        [DataMember(Name = "dimming", EmitDefaultValue = false)]
        public LightGetAllOfPowerupDimming Dimming { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LightGetAllOfPowerup {\n");
            sb.Append("  Preset: ").Append(Preset).Append("\n");
            sb.Append("  Configured: ").Append(Configured).Append("\n");
            sb.Append("  On: ").Append(On).Append("\n");
            sb.Append("  Dimming: ").Append(Dimming).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
