/*
 * Hue CLIP API
 *
 * See [openhue/openhue-api](https://github.com/openhue/openhue-api)
 *
 * The version of the OpenAPI document: v2
 * Contact: contact@openhue.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = clipapisdk.Client.OpenAPIDateConverter;

namespace clipapisdk.Model
{
    /// <summary>
    /// ProductData
    /// </summary>
    [DataContract(Name = "ProductData")]
    public partial class ProductData : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ProductArchetype
        /// </summary>
        [DataMember(Name = "product_archetype", EmitDefaultValue = false)]
        public ProductArchetype? ProductArchetype { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductData" /> class.
        /// </summary>
        /// <param name="modelId">Unique identification of device model.</param>
        /// <param name="manufacturerName">Name of device manufacturer.</param>
        /// <param name="productName">Name of the product.</param>
        /// <param name="productArchetype">productArchetype.</param>
        /// <param name="certified">This device is Hue certified.</param>
        /// <param name="softwareVersion">Software version of the product.</param>
        /// <param name="hardwarePlatformType">Hardware type; identified by Manufacturer code and ImageType.</param>
        public ProductData(string modelId = default(string), string manufacturerName = default(string), string productName = default(string), ProductArchetype? productArchetype = default(ProductArchetype?), bool certified = default(bool), string softwareVersion = default(string), string hardwarePlatformType = default(string))
        {
            this.ModelId = modelId;
            this.ManufacturerName = manufacturerName;
            this.ProductName = productName;
            this.ProductArchetype = productArchetype;
            this.Certified = certified;
            this.SoftwareVersion = softwareVersion;
            this.HardwarePlatformType = hardwarePlatformType;
        }

        /// <summary>
        /// Unique identification of device model
        /// </summary>
        /// <value>Unique identification of device model</value>
        /// <example>7602031P7</example>
        [DataMember(Name = "model_id", EmitDefaultValue = false)]
        public string ModelId { get; set; }

        /// <summary>
        /// Name of device manufacturer
        /// </summary>
        /// <value>Name of device manufacturer</value>
        /// <example>Signify Netherlands B.V.</example>
        [DataMember(Name = "manufacturer_name", EmitDefaultValue = false)]
        public string ManufacturerName { get; set; }

        /// <summary>
        /// Name of the product
        /// </summary>
        /// <value>Name of the product</value>
        /// <example>Hue Go</example>
        [DataMember(Name = "product_name", EmitDefaultValue = false)]
        public string ProductName { get; set; }

        /// <summary>
        /// This device is Hue certified
        /// </summary>
        /// <value>This device is Hue certified</value>
        [DataMember(Name = "certified", EmitDefaultValue = true)]
        public bool Certified { get; set; }

        /// <summary>
        /// Software version of the product
        /// </summary>
        /// <value>Software version of the product</value>
        /// <example>1.104.3</example>
        [DataMember(Name = "software_version", EmitDefaultValue = false)]
        public string SoftwareVersion { get; set; }

        /// <summary>
        /// Hardware type; identified by Manufacturer code and ImageType
        /// </summary>
        /// <value>Hardware type; identified by Manufacturer code and ImageType</value>
        /// <example>100b-120</example>
        [DataMember(Name = "hardware_platform_type", EmitDefaultValue = false)]
        public string HardwarePlatformType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductData {\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  ManufacturerName: ").Append(ManufacturerName).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  ProductArchetype: ").Append(ProductArchetype).Append("\n");
            sb.Append("  Certified: ").Append(Certified).Append("\n");
            sb.Append("  SoftwareVersion: ").Append(SoftwareVersion).Append("\n");
            sb.Append("  HardwarePlatformType: ").Append(HardwarePlatformType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.SoftwareVersion != null) {
                // SoftwareVersion (string) pattern
                Regex regexSoftwareVersion = new Regex(@"\d+\.\d+\.\d+", RegexOptions.CultureInvariant);
                if (!regexSoftwareVersion.Match(this.SoftwareVersion).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SoftwareVersion, must match a pattern of " + regexSoftwareVersion, new [] { "SoftwareVersion" });
                }
            }

            yield break;
        }
    }

}
