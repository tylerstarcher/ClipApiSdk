/*
 * Hue CLIP API
 *
 * See [openhue/openhue-api](https://github.com/openhue/openhue-api)
 *
 * The version of the OpenAPI document: v2
 * Contact: contact@openhue.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = clipapisdk.Client.OpenAPIDateConverter;

namespace clipapisdk.Model
{
    /// <summary>
    /// Feature containing basic signaling properties.
    /// </summary>
    [DataContract(Name = "Signaling")]
    public partial class Signaling : IValidatableObject
    {
        /// <summary>
        /// - &#x60;no_signal&#x60;: No signal is active. Write “no_signal” to stop active signal. - &#x60;on_off&#x60;: Toggles between max brightness and Off in fixed color. - &#x60;on_off_color&#x60;: Toggles between off and max brightness with color provided. - &#x60;alternating&#x60;: Alternates between 2 provided colors. 
        /// </summary>
        /// <value>- &#x60;no_signal&#x60;: No signal is active. Write “no_signal” to stop active signal. - &#x60;on_off&#x60;: Toggles between max brightness and Off in fixed color. - &#x60;on_off_color&#x60;: Toggles between off and max brightness with color provided. - &#x60;alternating&#x60;: Alternates between 2 provided colors. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SignalEnum
        {
            /// <summary>
            /// Enum NoSignal for value: no_signal
            /// </summary>
            [EnumMember(Value = "no_signal")]
            NoSignal = 1,

            /// <summary>
            /// Enum OnOff for value: on_off
            /// </summary>
            [EnumMember(Value = "on_off")]
            OnOff = 2,

            /// <summary>
            /// Enum OnOffColor for value: on_off_color
            /// </summary>
            [EnumMember(Value = "on_off_color")]
            OnOffColor = 3,

            /// <summary>
            /// Enum Alternating for value: alternating
            /// </summary>
            [EnumMember(Value = "alternating")]
            Alternating = 4
        }


        /// <summary>
        /// - &#x60;no_signal&#x60;: No signal is active. Write “no_signal” to stop active signal. - &#x60;on_off&#x60;: Toggles between max brightness and Off in fixed color. - &#x60;on_off_color&#x60;: Toggles between off and max brightness with color provided. - &#x60;alternating&#x60;: Alternates between 2 provided colors. 
        /// </summary>
        /// <value>- &#x60;no_signal&#x60;: No signal is active. Write “no_signal” to stop active signal. - &#x60;on_off&#x60;: Toggles between max brightness and Off in fixed color. - &#x60;on_off_color&#x60;: Toggles between off and max brightness with color provided. - &#x60;alternating&#x60;: Alternates between 2 provided colors. </value>
        [DataMember(Name = "signal", EmitDefaultValue = false)]
        public SignalEnum? Signal { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Signaling" /> class.
        /// </summary>
        /// <param name="signal">- &#x60;no_signal&#x60;: No signal is active. Write “no_signal” to stop active signal. - &#x60;on_off&#x60;: Toggles between max brightness and Off in fixed color. - &#x60;on_off_color&#x60;: Toggles between off and max brightness with color provided. - &#x60;alternating&#x60;: Alternates between 2 provided colors. .</param>
        /// <param name="duration">Duration has a max of 65534000 ms and a stepsize of 1 second. Values inbetween steps will be rounded. Duration is ignored for &#x60;no_signal&#x60;. .</param>
        /// <param name="color">List of colors to apply to the signal (not supported by all signals).</param>
        public Signaling(SignalEnum? signal = default(SignalEnum?), int duration = default(int), List<Color> color = default(List<Color>))
        {
            this.Signal = signal;
            this.Duration = duration;
            this.Color = color;
        }

        /// <summary>
        /// Duration has a max of 65534000 ms and a stepsize of 1 second. Values inbetween steps will be rounded. Duration is ignored for &#x60;no_signal&#x60;. 
        /// </summary>
        /// <value>Duration has a max of 65534000 ms and a stepsize of 1 second. Values inbetween steps will be rounded. Duration is ignored for &#x60;no_signal&#x60;. </value>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public int Duration { get; set; }

        /// <summary>
        /// List of colors to apply to the signal (not supported by all signals)
        /// </summary>
        /// <value>List of colors to apply to the signal (not supported by all signals)</value>
        [DataMember(Name = "color", EmitDefaultValue = false)]
        public List<Color> Color { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Signaling {\n");
            sb.Append("  Signal: ").Append(Signal).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Duration (int) maximum
            if (this.Duration > (int)65534000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Duration, must be a value less than or equal to 65534000.", new [] { "Duration" });
            }

            // Duration (int) minimum
            if (this.Duration < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Duration, must be a value greater than or equal to 0.", new [] { "Duration" });
            }

            yield break;
        }
    }

}
