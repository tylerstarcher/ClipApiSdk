/*
 * Hue CLIP API
 *
 * See [openhue/openhue-api](https://github.com/openhue/openhue-api)
 *
 * The version of the OpenAPI document: v2
 * Contact: contact@openhue.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = clipapisdk.Client.OpenAPIDateConverter;

namespace clipapisdk.Model
{
    /// <summary>
    /// PowerupDimming
    /// </summary>
    [DataContract(Name = "Powerup_dimming")]
    public partial class PowerupDimming : IValidatableObject
    {
        /// <summary>
        /// Dimming will set the brightness to the specified value after power up. When setting mode “dimming”, the dimming property must be included. Previous will set brightness to the state it was in before powering off. 
        /// </summary>
        /// <value>Dimming will set the brightness to the specified value after power up. When setting mode “dimming”, the dimming property must be included. Previous will set brightness to the state it was in before powering off. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            /// <summary>
            /// Enum Dimming for value: dimming
            /// </summary>
            [EnumMember(Value = "dimming")]
            Dimming = 1,

            /// <summary>
            /// Enum Previous for value: previous
            /// </summary>
            [EnumMember(Value = "previous")]
            Previous = 2
        }


        /// <summary>
        /// Dimming will set the brightness to the specified value after power up. When setting mode “dimming”, the dimming property must be included. Previous will set brightness to the state it was in before powering off. 
        /// </summary>
        /// <value>Dimming will set the brightness to the specified value after power up. When setting mode “dimming”, the dimming property must be included. Previous will set brightness to the state it was in before powering off. </value>
        [DataMember(Name = "mode", EmitDefaultValue = false)]
        public ModeEnum? Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PowerupDimming" /> class.
        /// </summary>
        /// <param name="mode">Dimming will set the brightness to the specified value after power up. When setting mode “dimming”, the dimming property must be included. Previous will set brightness to the state it was in before powering off. .</param>
        /// <param name="dimming">Brightness percentage. value cannot be 0, writing 0 changes it to lowest possible brightness.</param>
        /// <param name="color">color.</param>
        public PowerupDimming(ModeEnum? mode = default(ModeEnum?), decimal dimming = default(decimal), LightGetAllOfPowerupDimmingColor color = default(LightGetAllOfPowerupDimmingColor))
        {
            this.Mode = mode;
            this.Dimming = dimming;
            this.Color = color;
        }

        /// <summary>
        /// Brightness percentage. value cannot be 0, writing 0 changes it to lowest possible brightness
        /// </summary>
        /// <value>Brightness percentage. value cannot be 0, writing 0 changes it to lowest possible brightness</value>
        [DataMember(Name = "dimming", EmitDefaultValue = false)]
        public decimal Dimming { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name = "color", EmitDefaultValue = false)]
        public LightGetAllOfPowerupDimmingColor Color { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PowerupDimming {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Dimming: ").Append(Dimming).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Dimming (decimal) maximum
            if (this.Dimming > (decimal)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Dimming, must be a value less than or equal to 100.", new [] { "Dimming" });
            }

            // Dimming (decimal) minimum
            if (this.Dimming < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Dimming, must be a value greater than or equal to 0.", new [] { "Dimming" });
            }

            yield break;
        }
    }

}
