/*
 * Hue CLIP API
 *
 * See [openhue/openhue-api](https://github.com/openhue/openhue-api)
 *
 * The version of the OpenAPI document: v2
 * Contact: contact@openhue.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = clipapisdk.Client.OpenAPIDateConverter;

namespace clipapisdk.Model
{
    /// <summary>
    /// DevicePowerGetAllOfPowerState
    /// </summary>
    [DataContract(Name = "DevicePowerGet_allOf_power_state")]
    public partial class DevicePowerGetAllOfPowerState : IValidatableObject
    {
        /// <summary>
        /// Status of the power source of a device, only for battery powered devices.  - &#x60;normal&#x60; – battery level is sufficient - &#x60;low&#x60; – battery level low, some features (e.g. software update) might stop working, please change battery soon - &#x60;critical&#x60; – battery level critical, device can fail any moment 
        /// </summary>
        /// <value>Status of the power source of a device, only for battery powered devices.  - &#x60;normal&#x60; – battery level is sufficient - &#x60;low&#x60; – battery level low, some features (e.g. software update) might stop working, please change battery soon - &#x60;critical&#x60; – battery level critical, device can fail any moment </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BatteryStateEnum
        {
            /// <summary>
            /// Enum Normal for value: normal
            /// </summary>
            [EnumMember(Value = "normal")]
            Normal = 1,

            /// <summary>
            /// Enum Low for value: low
            /// </summary>
            [EnumMember(Value = "low")]
            Low = 2,

            /// <summary>
            /// Enum Critical for value: critical
            /// </summary>
            [EnumMember(Value = "critical")]
            Critical = 3
        }


        /// <summary>
        /// Status of the power source of a device, only for battery powered devices.  - &#x60;normal&#x60; – battery level is sufficient - &#x60;low&#x60; – battery level low, some features (e.g. software update) might stop working, please change battery soon - &#x60;critical&#x60; – battery level critical, device can fail any moment 
        /// </summary>
        /// <value>Status of the power source of a device, only for battery powered devices.  - &#x60;normal&#x60; – battery level is sufficient - &#x60;low&#x60; – battery level low, some features (e.g. software update) might stop working, please change battery soon - &#x60;critical&#x60; – battery level critical, device can fail any moment </value>
        [DataMember(Name = "battery_state", EmitDefaultValue = false)]
        public BatteryStateEnum? BatteryState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DevicePowerGetAllOfPowerState" /> class.
        /// </summary>
        /// <param name="batteryState">Status of the power source of a device, only for battery powered devices.  - &#x60;normal&#x60; – battery level is sufficient - &#x60;low&#x60; – battery level low, some features (e.g. software update) might stop working, please change battery soon - &#x60;critical&#x60; – battery level critical, device can fail any moment .</param>
        /// <param name="batteryLevel">The current battery state in percent, only for battery powered devices..</param>
        public DevicePowerGetAllOfPowerState(BatteryStateEnum? batteryState = default(BatteryStateEnum?), int batteryLevel = default(int))
        {
            this.BatteryState = batteryState;
            this.BatteryLevel = batteryLevel;
        }

        /// <summary>
        /// The current battery state in percent, only for battery powered devices.
        /// </summary>
        /// <value>The current battery state in percent, only for battery powered devices.</value>
        [DataMember(Name = "battery_level", EmitDefaultValue = false)]
        public int BatteryLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DevicePowerGetAllOfPowerState {\n");
            sb.Append("  BatteryState: ").Append(BatteryState).Append("\n");
            sb.Append("  BatteryLevel: ").Append(BatteryLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BatteryLevel (int) maximum
            if (this.BatteryLevel > (int)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BatteryLevel, must be a value less than or equal to 100.", new [] { "BatteryLevel" });
            }

            // BatteryLevel (int) minimum
            if (this.BatteryLevel < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BatteryLevel, must be a value greater than or equal to 0.", new [] { "BatteryLevel" });
            }

            yield break;
        }
    }

}
