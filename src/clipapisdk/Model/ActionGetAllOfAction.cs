/*
 * Hue CLIP API
 *
 * See [openhue/openhue-api](https://github.com/openhue/openhue-api)
 *
 * The version of the OpenAPI document: v2
 * Contact: contact@openhue.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = clipapisdk.Client.OpenAPIDateConverter;

namespace clipapisdk.Model
{
    /// <summary>
    /// The action to be executed on recall
    /// </summary>
    [DataContract(Name = "ActionGet_allOf_action")]
    public partial class ActionGetAllOfAction : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionGetAllOfAction" /> class.
        /// </summary>
        /// <param name="on">on.</param>
        /// <param name="dimming">dimming.</param>
        /// <param name="color">color.</param>
        /// <param name="colorTemperature">colorTemperature.</param>
        /// <param name="gradient">gradient.</param>
        /// <param name="effects">effects.</param>
        public ActionGetAllOfAction(On on = default(On), Dimming dimming = default(Dimming), Color color = default(Color), ColorTemperature colorTemperature = default(ColorTemperature), Gradient gradient = default(Gradient), ActionGetAllOfActionEffects effects = default(ActionGetAllOfActionEffects))
        {
            this.On = on;
            this.Dimming = dimming;
            this.Color = color;
            this.ColorTemperature = colorTemperature;
            this.Gradient = gradient;
            this.Effects = effects;
        }

        /// <summary>
        /// Gets or Sets On
        /// </summary>
        [DataMember(Name = "on", EmitDefaultValue = false)]
        public On On { get; set; }

        /// <summary>
        /// Gets or Sets Dimming
        /// </summary>
        [DataMember(Name = "dimming", EmitDefaultValue = false)]
        public Dimming Dimming { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name = "color", EmitDefaultValue = false)]
        public Color Color { get; set; }

        /// <summary>
        /// Gets or Sets ColorTemperature
        /// </summary>
        [DataMember(Name = "color_temperature", EmitDefaultValue = false)]
        public ColorTemperature ColorTemperature { get; set; }

        /// <summary>
        /// Gets or Sets Gradient
        /// </summary>
        [DataMember(Name = "gradient", EmitDefaultValue = false)]
        public Gradient Gradient { get; set; }

        /// <summary>
        /// Gets or Sets Effects
        /// </summary>
        [DataMember(Name = "effects", EmitDefaultValue = false)]
        public ActionGetAllOfActionEffects Effects { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActionGetAllOfAction {\n");
            sb.Append("  On: ").Append(On).Append("\n");
            sb.Append("  Dimming: ").Append(Dimming).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  ColorTemperature: ").Append(ColorTemperature).Append("\n");
            sb.Append("  Gradient: ").Append(Gradient).Append("\n");
            sb.Append("  Effects: ").Append(Effects).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
