/*
 * Hue CLIP API
 *
 * See [openhue/openhue-api](https://github.com/openhue/openhue-api)
 *
 * The version of the OpenAPI document: v2
 * Contact: contact@openhue.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = clipapisdk.Client.OpenAPIDateConverter;

namespace clipapisdk.Model
{
    /// <summary>
    /// Basic feature containing effect properties.
    /// </summary>
    [DataContract(Name = "LightGet_allOf_effects")]
    public partial class LightGetAllOfEffects : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public SupportedEffects? Status { get; set; }

        /// <summary>
        /// Gets or Sets Effect
        /// </summary>
        [DataMember(Name = "effect", EmitDefaultValue = false)]
        public SupportedEffects? Effect { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LightGetAllOfEffects" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="statusValues">Possible status values in which a light could be when playing an effect..</param>
        /// <param name="effect">effect.</param>
        /// <param name="effectValues">Possible status values in which a light could be when playing an effect..</param>
        public LightGetAllOfEffects(SupportedEffects? status = default(SupportedEffects?), List<SupportedEffects> statusValues = default(List<SupportedEffects>), SupportedEffects? effect = default(SupportedEffects?), List<SupportedEffects> effectValues = default(List<SupportedEffects>))
        {
            this.Status = status;
            this.StatusValues = statusValues;
            this.Effect = effect;
            this.EffectValues = effectValues;
        }

        /// <summary>
        /// Possible status values in which a light could be when playing an effect.
        /// </summary>
        /// <value>Possible status values in which a light could be when playing an effect.</value>
        [DataMember(Name = "status_values", EmitDefaultValue = false)]
        public List<SupportedEffects> StatusValues { get; set; }

        /// <summary>
        /// Possible status values in which a light could be when playing an effect.
        /// </summary>
        /// <value>Possible status values in which a light could be when playing an effect.</value>
        [DataMember(Name = "effect_values", EmitDefaultValue = false)]
        public List<SupportedEffects> EffectValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LightGetAllOfEffects {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusValues: ").Append(StatusValues).Append("\n");
            sb.Append("  Effect: ").Append(Effect).Append("\n");
            sb.Append("  EffectValues: ").Append(EffectValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
