/*
 * Hue CLIP API
 *
 * See [openhue/openhue-api](https://github.com/openhue/openhue-api)
 *
 * The version of the OpenAPI document: v2
 * Contact: contact@openhue.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = clipapisdk.Client.OpenAPIDateConverter;

namespace clipapisdk.Model
{
    /// <summary>
    /// LightGetAllOfDynamics
    /// </summary>
    [DataContract(Name = "LightGet_allOf_dynamics")]
    public partial class LightGetAllOfDynamics : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public SupportedDynamicStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LightGetAllOfDynamics" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="statusValues">Statuses in which a lamp could be when playing dynamics..</param>
        /// <param name="speed">speed of dynamic palette or effect. The speed is valid for the dynamic palette if the status is dynamic_palette or for the corresponding effect listed in status. In case of status none, the speed is not valid.</param>
        /// <param name="speedValid">Indicates whether the value presented in speed is valid.</param>
        public LightGetAllOfDynamics(SupportedDynamicStatus? status = default(SupportedDynamicStatus?), List<SupportedDynamicStatus> statusValues = default(List<SupportedDynamicStatus>), decimal speed = default(decimal), bool speedValid = default(bool))
        {
            this.Status = status;
            this.StatusValues = statusValues;
            this.Speed = speed;
            this.SpeedValid = speedValid;
        }

        /// <summary>
        /// Statuses in which a lamp could be when playing dynamics.
        /// </summary>
        /// <value>Statuses in which a lamp could be when playing dynamics.</value>
        [DataMember(Name = "status_values", EmitDefaultValue = false)]
        public List<SupportedDynamicStatus> StatusValues { get; set; }

        /// <summary>
        /// speed of dynamic palette or effect. The speed is valid for the dynamic palette if the status is dynamic_palette or for the corresponding effect listed in status. In case of status none, the speed is not valid
        /// </summary>
        /// <value>speed of dynamic palette or effect. The speed is valid for the dynamic palette if the status is dynamic_palette or for the corresponding effect listed in status. In case of status none, the speed is not valid</value>
        [DataMember(Name = "speed", EmitDefaultValue = false)]
        public decimal Speed { get; set; }

        /// <summary>
        /// Indicates whether the value presented in speed is valid
        /// </summary>
        /// <value>Indicates whether the value presented in speed is valid</value>
        [DataMember(Name = "speed_valid", EmitDefaultValue = true)]
        public bool SpeedValid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LightGetAllOfDynamics {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusValues: ").Append(StatusValues).Append("\n");
            sb.Append("  Speed: ").Append(Speed).Append("\n");
            sb.Append("  SpeedValid: ").Append(SpeedValid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Speed (decimal) maximum
            if (this.Speed > (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Speed, must be a value less than or equal to 0.", new [] { "Speed" });
            }

            // Speed (decimal) minimum
            if (this.Speed < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Speed, must be a value greater than or equal to 0.", new [] { "Speed" });
            }

            yield break;
        }
    }

}
