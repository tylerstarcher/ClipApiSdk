/*
 * Hue CLIP API
 *
 * See [openhue/openhue-api](https://github.com/openhue/openhue-api)
 *
 * The version of the OpenAPI document: v2
 * Contact: contact@openhue.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = clipapisdk.Client.OpenAPIDateConverter;

namespace clipapisdk.Model
{
    /// <summary>
    /// The API is actually returning the full resource description depending on the type, not just the fields that are documented below. 
    /// </summary>
    [DataContract(Name = "ResourceGet")]
    public partial class ResourceGet : IValidatableObject
    {
        /// <summary>
        /// Type of the supported resources
        /// </summary>
        /// <value>Type of the supported resources</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Device for value: device
            /// </summary>
            [EnumMember(Value = "device")]
            Device = 1,

            /// <summary>
            /// Enum BridgeHome for value: bridge_home
            /// </summary>
            [EnumMember(Value = "bridge_home")]
            BridgeHome = 2,

            /// <summary>
            /// Enum Room for value: room
            /// </summary>
            [EnumMember(Value = "room")]
            Room = 3,

            /// <summary>
            /// Enum Zone for value: zone
            /// </summary>
            [EnumMember(Value = "zone")]
            Zone = 4,

            /// <summary>
            /// Enum Light for value: light
            /// </summary>
            [EnumMember(Value = "light")]
            Light = 5,

            /// <summary>
            /// Enum Button for value: button
            /// </summary>
            [EnumMember(Value = "button")]
            Button = 6,

            /// <summary>
            /// Enum RelativeRotary for value: relative_rotary
            /// </summary>
            [EnumMember(Value = "relative_rotary")]
            RelativeRotary = 7,

            /// <summary>
            /// Enum Temperature for value: temperature
            /// </summary>
            [EnumMember(Value = "temperature")]
            Temperature = 8,

            /// <summary>
            /// Enum LightLevel for value: light_level
            /// </summary>
            [EnumMember(Value = "light_level")]
            LightLevel = 9,

            /// <summary>
            /// Enum Motion for value: motion
            /// </summary>
            [EnumMember(Value = "motion")]
            Motion = 10,

            /// <summary>
            /// Enum CameraMotion for value: camera_motion
            /// </summary>
            [EnumMember(Value = "camera_motion")]
            CameraMotion = 11,

            /// <summary>
            /// Enum Entertainment for value: entertainment
            /// </summary>
            [EnumMember(Value = "entertainment")]
            Entertainment = 12,

            /// <summary>
            /// Enum Contact for value: contact
            /// </summary>
            [EnumMember(Value = "contact")]
            Contact = 13,

            /// <summary>
            /// Enum Tamper for value: tamper
            /// </summary>
            [EnumMember(Value = "tamper")]
            Tamper = 14,

            /// <summary>
            /// Enum GroupedLight for value: grouped_light
            /// </summary>
            [EnumMember(Value = "grouped_light")]
            GroupedLight = 15,

            /// <summary>
            /// Enum DevicePower for value: device_power
            /// </summary>
            [EnumMember(Value = "device_power")]
            DevicePower = 16,

            /// <summary>
            /// Enum ZigbeeBridgeConnectivity for value: zigbee_bridge_connectivity
            /// </summary>
            [EnumMember(Value = "zigbee_bridge_connectivity")]
            ZigbeeBridgeConnectivity = 17,

            /// <summary>
            /// Enum ZigbeeConnectivity for value: zigbee_connectivity
            /// </summary>
            [EnumMember(Value = "zigbee_connectivity")]
            ZigbeeConnectivity = 18,

            /// <summary>
            /// Enum ZgpConnectivity for value: zgp_connectivity
            /// </summary>
            [EnumMember(Value = "zgp_connectivity")]
            ZgpConnectivity = 19,

            /// <summary>
            /// Enum Bridge for value: bridge
            /// </summary>
            [EnumMember(Value = "bridge")]
            Bridge = 20,

            /// <summary>
            /// Enum ZigbeeDeviceDiscovery for value: zigbee_device_discovery
            /// </summary>
            [EnumMember(Value = "zigbee_device_discovery")]
            ZigbeeDeviceDiscovery = 21,

            /// <summary>
            /// Enum Homekit for value: homekit
            /// </summary>
            [EnumMember(Value = "homekit")]
            Homekit = 22,

            /// <summary>
            /// Enum Matter for value: matter
            /// </summary>
            [EnumMember(Value = "matter")]
            Matter = 23,

            /// <summary>
            /// Enum MatterFabric for value: matter_fabric
            /// </summary>
            [EnumMember(Value = "matter_fabric")]
            MatterFabric = 24,

            /// <summary>
            /// Enum Scene for value: scene
            /// </summary>
            [EnumMember(Value = "scene")]
            Scene = 25,

            /// <summary>
            /// Enum EntertainmentConfiguration for value: entertainment_configuration
            /// </summary>
            [EnumMember(Value = "entertainment_configuration")]
            EntertainmentConfiguration = 26,

            /// <summary>
            /// Enum PublicImage for value: public_image
            /// </summary>
            [EnumMember(Value = "public_image")]
            PublicImage = 27,

            /// <summary>
            /// Enum AuthV1 for value: auth_v1
            /// </summary>
            [EnumMember(Value = "auth_v1")]
            AuthV1 = 28,

            /// <summary>
            /// Enum BehaviorScript for value: behavior_script
            /// </summary>
            [EnumMember(Value = "behavior_script")]
            BehaviorScript = 29,

            /// <summary>
            /// Enum BehaviorInstance for value: behavior_instance
            /// </summary>
            [EnumMember(Value = "behavior_instance")]
            BehaviorInstance = 30,

            /// <summary>
            /// Enum Geofence for value: geofence
            /// </summary>
            [EnumMember(Value = "geofence")]
            Geofence = 31,

            /// <summary>
            /// Enum GeofenceClient for value: geofence_client
            /// </summary>
            [EnumMember(Value = "geofence_client")]
            GeofenceClient = 32,

            /// <summary>
            /// Enum Geolocation for value: geolocation
            /// </summary>
            [EnumMember(Value = "geolocation")]
            Geolocation = 33,

            /// <summary>
            /// Enum SmartScene for value: smart_scene
            /// </summary>
            [EnumMember(Value = "smart_scene")]
            SmartScene = 34
        }


        /// <summary>
        /// Type of the supported resources
        /// </summary>
        /// <value>Type of the supported resources</value>
        /// <example>light</example>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceGet" /> class.
        /// </summary>
        /// <param name="type">Type of the supported resources.</param>
        /// <param name="id">Unique identifier representing a specific resource instance.</param>
        /// <param name="idV1">Clip v1 resource identifier.</param>
        /// <param name="owner">owner.</param>
        public ResourceGet(TypeEnum? type = default(TypeEnum?), string id = default(string), string idV1 = default(string), ResourceIdentifier owner = default(ResourceIdentifier))
        {
            this.Type = type;
            this.Id = id;
            this.IdV1 = idV1;
            this.Owner = owner;
        }

        /// <summary>
        /// Unique identifier representing a specific resource instance
        /// </summary>
        /// <value>Unique identifier representing a specific resource instance</value>
        /// <example>3883f8bf-30a3-445b-ac06-b047d50599df</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Clip v1 resource identifier
        /// </summary>
        /// <value>Clip v1 resource identifier</value>
        /// <example>/lights/8</example>
        [DataMember(Name = "id_v1", EmitDefaultValue = false)]
        public string IdV1 { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name = "owner", EmitDefaultValue = false)]
        public ResourceIdentifier Owner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResourceGet {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdV1: ").Append(IdV1).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Id != null) {
                // Id (string) pattern
                Regex regexId = new Regex(@"^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$", RegexOptions.CultureInvariant);
                if (!regexId.Match(this.Id).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
                }
            }

            if (this.IdV1 != null) {
                // IdV1 (string) pattern
                Regex regexIdV1 = new Regex(@"^(\/[a-z]{4,32}\/[0-9a-zA-Z-]{1,32})?$", RegexOptions.CultureInvariant);
                if (!regexIdV1.Match(this.IdV1).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdV1, must match a pattern of " + regexIdV1, new [] { "IdV1" });
                }
            }

            yield break;
        }
    }

}
