/*
 * Hue CLIP API
 *
 * See [openhue/openhue-api](https://github.com/openhue/openhue-api)
 *
 * The version of the OpenAPI document: v2
 * Contact: contact@openhue.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = clipapisdk.Client.OpenAPIDateConverter;

namespace clipapisdk.Model
{
    /// <summary>
    /// ColorTemperaturePalettePostColorTemperature
    /// </summary>
    [DataContract(Name = "ColorTemperaturePalettePost_color_temperature")]
    public partial class ColorTemperaturePalettePostColorTemperature : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ColorTemperaturePalettePostColorTemperature" /> class.
        /// </summary>
        /// <param name="mirek">color temperature in mirek or null when the light color is not in the ct spectrum.</param>
        public ColorTemperaturePalettePostColorTemperature(int mirek = default(int))
        {
            this.Mirek = mirek;
        }

        /// <summary>
        /// color temperature in mirek or null when the light color is not in the ct spectrum
        /// </summary>
        /// <value>color temperature in mirek or null when the light color is not in the ct spectrum</value>
        [DataMember(Name = "mirek", EmitDefaultValue = false)]
        public int Mirek { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ColorTemperaturePalettePostColorTemperature {\n");
            sb.Append("  Mirek: ").Append(Mirek).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Mirek (int) maximum
            if (this.Mirek > (int)500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Mirek, must be a value less than or equal to 500.", new [] { "Mirek" });
            }

            // Mirek (int) minimum
            if (this.Mirek < (int)153)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Mirek, must be a value greater than or equal to 153.", new [] { "Mirek" });
            }

            yield break;
        }
    }

}
