/*
 * Hue CLIP API
 *
 * See [openhue/openhue-api](https://github.com/openhue/openhue-api)
 *
 * The version of the OpenAPI document: v2
 * Contact: contact@openhue.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = clipapisdk.Client.OpenAPIDateConverter;

namespace clipapisdk.Model
{
    /// <summary>
    /// LightGetAllOfColorTemperatureMirekSchema
    /// </summary>
    [DataContract(Name = "LightGet_allOf_color_temperature_mirek_schema")]
    public partial class LightGetAllOfColorTemperatureMirekSchema : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LightGetAllOfColorTemperatureMirekSchema" /> class.
        /// </summary>
        /// <param name="mirekMinimum">minimum color temperature this light supports.</param>
        /// <param name="mirekMaximum">maximum color temperature this light supports.</param>
        public LightGetAllOfColorTemperatureMirekSchema(int mirekMinimum = default(int), int mirekMaximum = default(int))
        {
            this.MirekMinimum = mirekMinimum;
            this.MirekMaximum = mirekMaximum;
        }

        /// <summary>
        /// minimum color temperature this light supports
        /// </summary>
        /// <value>minimum color temperature this light supports</value>
        [DataMember(Name = "mirek_minimum", EmitDefaultValue = false)]
        public int MirekMinimum { get; set; }

        /// <summary>
        /// maximum color temperature this light supports
        /// </summary>
        /// <value>maximum color temperature this light supports</value>
        [DataMember(Name = "mirek_maximum", EmitDefaultValue = false)]
        public int MirekMaximum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LightGetAllOfColorTemperatureMirekSchema {\n");
            sb.Append("  MirekMinimum: ").Append(MirekMinimum).Append("\n");
            sb.Append("  MirekMaximum: ").Append(MirekMaximum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MirekMinimum (int) maximum
            if (this.MirekMinimum > (int)500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MirekMinimum, must be a value less than or equal to 500.", new [] { "MirekMinimum" });
            }

            // MirekMinimum (int) minimum
            if (this.MirekMinimum < (int)153)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MirekMinimum, must be a value greater than or equal to 153.", new [] { "MirekMinimum" });
            }

            // MirekMaximum (int) maximum
            if (this.MirekMaximum > (int)500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MirekMaximum, must be a value less than or equal to 500.", new [] { "MirekMaximum" });
            }

            // MirekMaximum (int) minimum
            if (this.MirekMaximum < (int)153)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MirekMaximum, must be a value greater than or equal to 153.", new [] { "MirekMaximum" });
            }

            yield break;
        }
    }

}
