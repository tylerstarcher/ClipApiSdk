/*
 * Hue CLIP API
 *
 * See [openhue/openhue-api](https://github.com/openhue/openhue-api)
 *
 * The version of the OpenAPI document: v2
 * Contact: contact@openhue.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = clipapisdk.Client.OpenAPIDateConverter;

namespace clipapisdk.Model
{
    /// <summary>
    /// ScenePut
    /// </summary>
    [DataContract(Name = "ScenePut")]
    public partial class ScenePut : IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Scene for value: scene
            /// </summary>
            [EnumMember(Value = "scene")]
            Scene = 1
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScenePut" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="actions">List of actions to be executed synchronously on recall.</param>
        /// <param name="recall">recall.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="palette">palette.</param>
        /// <param name="speed">Speed of dynamic palette for this scene.</param>
        /// <param name="autoDynamic">Indicates whether to automatically start the scene dynamically on active recall.</param>
        public ScenePut(TypeEnum? type = default(TypeEnum?), List<ActionPost> actions = default(List<ActionPost>), SceneRecall recall = default(SceneRecall), SceneMetadata metadata = default(SceneMetadata), ScenePalette palette = default(ScenePalette), decimal speed = default(decimal), bool autoDynamic = default(bool))
        {
            this.Type = type;
            this.Actions = actions;
            this.Recall = recall;
            this.Metadata = metadata;
            this.Palette = palette;
            this.Speed = speed;
            this.AutoDynamic = autoDynamic;
        }

        /// <summary>
        /// List of actions to be executed synchronously on recall
        /// </summary>
        /// <value>List of actions to be executed synchronously on recall</value>
        [DataMember(Name = "actions", EmitDefaultValue = false)]
        public List<ActionPost> Actions { get; set; }

        /// <summary>
        /// Gets or Sets Recall
        /// </summary>
        [DataMember(Name = "recall", EmitDefaultValue = false)]
        public SceneRecall Recall { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public SceneMetadata Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Palette
        /// </summary>
        [DataMember(Name = "palette", EmitDefaultValue = false)]
        public ScenePalette Palette { get; set; }

        /// <summary>
        /// Speed of dynamic palette for this scene
        /// </summary>
        /// <value>Speed of dynamic palette for this scene</value>
        [DataMember(Name = "speed", EmitDefaultValue = false)]
        public decimal Speed { get; set; }

        /// <summary>
        /// Indicates whether to automatically start the scene dynamically on active recall
        /// </summary>
        /// <value>Indicates whether to automatically start the scene dynamically on active recall</value>
        [DataMember(Name = "auto_dynamic", EmitDefaultValue = true)]
        public bool AutoDynamic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScenePut {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Recall: ").Append(Recall).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Palette: ").Append(Palette).Append("\n");
            sb.Append("  Speed: ").Append(Speed).Append("\n");
            sb.Append("  AutoDynamic: ").Append(AutoDynamic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Speed (decimal) maximum
            if (this.Speed > (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Speed, must be a value less than or equal to 1.", new [] { "Speed" });
            }

            // Speed (decimal) minimum
            if (this.Speed < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Speed, must be a value greater than or equal to 0.", new [] { "Speed" });
            }

            yield break;
        }
    }

}
