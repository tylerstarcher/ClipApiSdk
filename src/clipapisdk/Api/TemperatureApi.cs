/*
 * Hue CLIP API
 *
 * See [openhue/openhue-api](https://github.com/openhue/openhue-api)
 *
 * The version of the OpenAPI document: v2
 * Contact: contact@openhue.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using clipapisdk.Client;
using clipapisdk.Model;

namespace clipapisdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemperatureApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get temperature sensor information
        /// </summary>
        /// <remarks>
        /// Get details of a single temperature sensor from its given &#x60;{temperatureId}&#x60;.
        /// </remarks>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temperatureId">ID of the temperature sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTemperatures200Response</returns>
        GetTemperatures200Response GetTemperature(string temperatureId, int operationIndex = 0);

        /// <summary>
        /// Get temperature sensor information
        /// </summary>
        /// <remarks>
        /// Get details of a single temperature sensor from its given &#x60;{temperatureId}&#x60;.
        /// </remarks>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temperatureId">ID of the temperature sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTemperatures200Response</returns>
        ApiResponse<GetTemperatures200Response> GetTemperatureWithHttpInfo(string temperatureId, int operationIndex = 0);
        /// <summary>
        /// List temperatures
        /// </summary>
        /// <remarks>
        /// List all temperatures
        /// </remarks>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTemperatures200Response</returns>
        GetTemperatures200Response GetTemperatures(int operationIndex = 0);

        /// <summary>
        /// List temperatures
        /// </summary>
        /// <remarks>
        /// List all temperatures
        /// </remarks>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTemperatures200Response</returns>
        ApiResponse<GetTemperatures200Response> GetTemperaturesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update temperature sensor
        /// </summary>
        /// <remarks>
        /// Update a temperature sensor from its given &#x60;{temperatureId}&#x60;.
        /// </remarks>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temperatureId">ID of the temperature sensor</param>
        /// <param name="temperaturePut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateDevice200Response</returns>
        UpdateDevice200Response UpdateTemperature(string temperatureId, TemperaturePut? temperaturePut = default(TemperaturePut?), int operationIndex = 0);

        /// <summary>
        /// Update temperature sensor
        /// </summary>
        /// <remarks>
        /// Update a temperature sensor from its given &#x60;{temperatureId}&#x60;.
        /// </remarks>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temperatureId">ID of the temperature sensor</param>
        /// <param name="temperaturePut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateDevice200Response</returns>
        ApiResponse<UpdateDevice200Response> UpdateTemperatureWithHttpInfo(string temperatureId, TemperaturePut? temperaturePut = default(TemperaturePut?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemperatureApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get temperature sensor information
        /// </summary>
        /// <remarks>
        /// Get details of a single temperature sensor from its given &#x60;{temperatureId}&#x60;.
        /// </remarks>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temperatureId">ID of the temperature sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTemperatures200Response</returns>
        System.Threading.Tasks.Task<GetTemperatures200Response> GetTemperatureAsync(string temperatureId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get temperature sensor information
        /// </summary>
        /// <remarks>
        /// Get details of a single temperature sensor from its given &#x60;{temperatureId}&#x60;.
        /// </remarks>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temperatureId">ID of the temperature sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTemperatures200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTemperatures200Response>> GetTemperatureWithHttpInfoAsync(string temperatureId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List temperatures
        /// </summary>
        /// <remarks>
        /// List all temperatures
        /// </remarks>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTemperatures200Response</returns>
        System.Threading.Tasks.Task<GetTemperatures200Response> GetTemperaturesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List temperatures
        /// </summary>
        /// <remarks>
        /// List all temperatures
        /// </remarks>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTemperatures200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTemperatures200Response>> GetTemperaturesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update temperature sensor
        /// </summary>
        /// <remarks>
        /// Update a temperature sensor from its given &#x60;{temperatureId}&#x60;.
        /// </remarks>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temperatureId">ID of the temperature sensor</param>
        /// <param name="temperaturePut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateDevice200Response</returns>
        System.Threading.Tasks.Task<UpdateDevice200Response> UpdateTemperatureAsync(string temperatureId, TemperaturePut? temperaturePut = default(TemperaturePut?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update temperature sensor
        /// </summary>
        /// <remarks>
        /// Update a temperature sensor from its given &#x60;{temperatureId}&#x60;.
        /// </remarks>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temperatureId">ID of the temperature sensor</param>
        /// <param name="temperaturePut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateDevice200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateDevice200Response>> UpdateTemperatureWithHttpInfoAsync(string temperatureId, TemperaturePut? temperaturePut = default(TemperaturePut?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemperatureApi : ITemperatureApiSync, ITemperatureApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemperatureApi : ITemperatureApi
    {
        private clipapisdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemperatureApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemperatureApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemperatureApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemperatureApi(string basePath)
        {
            this.Configuration = clipapisdk.Client.Configuration.MergeConfigurations(
                clipapisdk.Client.GlobalConfiguration.Instance,
                new clipapisdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new clipapisdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new clipapisdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = clipapisdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemperatureApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemperatureApi(clipapisdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = clipapisdk.Client.Configuration.MergeConfigurations(
                clipapisdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new clipapisdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new clipapisdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = clipapisdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemperatureApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TemperatureApi(clipapisdk.Client.ISynchronousClient client, clipapisdk.Client.IAsynchronousClient asyncClient, clipapisdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = clipapisdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public clipapisdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public clipapisdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public clipapisdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public clipapisdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get temperature sensor information Get details of a single temperature sensor from its given &#x60;{temperatureId}&#x60;.
        /// </summary>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temperatureId">ID of the temperature sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTemperatures200Response</returns>
        public GetTemperatures200Response GetTemperature(string temperatureId, int operationIndex = 0)
        {
            clipapisdk.Client.ApiResponse<GetTemperatures200Response> localVarResponse = GetTemperatureWithHttpInfo(temperatureId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get temperature sensor information Get details of a single temperature sensor from its given &#x60;{temperatureId}&#x60;.
        /// </summary>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temperatureId">ID of the temperature sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTemperatures200Response</returns>
        public clipapisdk.Client.ApiResponse<GetTemperatures200Response> GetTemperatureWithHttpInfo(string temperatureId, int operationIndex = 0)
        {
            // verify the required parameter 'temperatureId' is set
            if (temperatureId == null)
            {
                throw new clipapisdk.Client.ApiException(400, "Missing required parameter 'temperatureId' when calling TemperatureApi->GetTemperature");
            }

            clipapisdk.Client.RequestOptions localVarRequestOptions = new clipapisdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = clipapisdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = clipapisdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("temperatureId", clipapisdk.Client.ClientUtils.ParameterToString(temperatureId)); // path parameter

            localVarRequestOptions.Operation = "TemperatureApi.GetTemperature";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (HueApplicationKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hue-application-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("hue-application-key", this.Configuration.GetApiKeyWithPrefix("hue-application-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetTemperatures200Response>("/clip/v2/resource/temperature/{temperatureId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemperature", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get temperature sensor information Get details of a single temperature sensor from its given &#x60;{temperatureId}&#x60;.
        /// </summary>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temperatureId">ID of the temperature sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTemperatures200Response</returns>
        public async System.Threading.Tasks.Task<GetTemperatures200Response> GetTemperatureAsync(string temperatureId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            clipapisdk.Client.ApiResponse<GetTemperatures200Response> localVarResponse = await GetTemperatureWithHttpInfoAsync(temperatureId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get temperature sensor information Get details of a single temperature sensor from its given &#x60;{temperatureId}&#x60;.
        /// </summary>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temperatureId">ID of the temperature sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTemperatures200Response)</returns>
        public async System.Threading.Tasks.Task<clipapisdk.Client.ApiResponse<GetTemperatures200Response>> GetTemperatureWithHttpInfoAsync(string temperatureId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'temperatureId' is set
            if (temperatureId == null)
            {
                throw new clipapisdk.Client.ApiException(400, "Missing required parameter 'temperatureId' when calling TemperatureApi->GetTemperature");
            }


            clipapisdk.Client.RequestOptions localVarRequestOptions = new clipapisdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = clipapisdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = clipapisdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("temperatureId", clipapisdk.Client.ClientUtils.ParameterToString(temperatureId)); // path parameter

            localVarRequestOptions.Operation = "TemperatureApi.GetTemperature";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (HueApplicationKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hue-application-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("hue-application-key", this.Configuration.GetApiKeyWithPrefix("hue-application-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetTemperatures200Response>("/clip/v2/resource/temperature/{temperatureId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemperature", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List temperatures List all temperatures
        /// </summary>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTemperatures200Response</returns>
        public GetTemperatures200Response GetTemperatures(int operationIndex = 0)
        {
            clipapisdk.Client.ApiResponse<GetTemperatures200Response> localVarResponse = GetTemperaturesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List temperatures List all temperatures
        /// </summary>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTemperatures200Response</returns>
        public clipapisdk.Client.ApiResponse<GetTemperatures200Response> GetTemperaturesWithHttpInfo(int operationIndex = 0)
        {
            clipapisdk.Client.RequestOptions localVarRequestOptions = new clipapisdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = clipapisdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = clipapisdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TemperatureApi.GetTemperatures";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (HueApplicationKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hue-application-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("hue-application-key", this.Configuration.GetApiKeyWithPrefix("hue-application-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetTemperatures200Response>("/clip/v2/resource/temperature", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemperatures", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List temperatures List all temperatures
        /// </summary>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTemperatures200Response</returns>
        public async System.Threading.Tasks.Task<GetTemperatures200Response> GetTemperaturesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            clipapisdk.Client.ApiResponse<GetTemperatures200Response> localVarResponse = await GetTemperaturesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List temperatures List all temperatures
        /// </summary>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTemperatures200Response)</returns>
        public async System.Threading.Tasks.Task<clipapisdk.Client.ApiResponse<GetTemperatures200Response>> GetTemperaturesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            clipapisdk.Client.RequestOptions localVarRequestOptions = new clipapisdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = clipapisdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = clipapisdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TemperatureApi.GetTemperatures";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (HueApplicationKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hue-application-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("hue-application-key", this.Configuration.GetApiKeyWithPrefix("hue-application-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetTemperatures200Response>("/clip/v2/resource/temperature", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemperatures", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update temperature sensor Update a temperature sensor from its given &#x60;{temperatureId}&#x60;.
        /// </summary>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temperatureId">ID of the temperature sensor</param>
        /// <param name="temperaturePut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateDevice200Response</returns>
        public UpdateDevice200Response UpdateTemperature(string temperatureId, TemperaturePut? temperaturePut = default(TemperaturePut?), int operationIndex = 0)
        {
            clipapisdk.Client.ApiResponse<UpdateDevice200Response> localVarResponse = UpdateTemperatureWithHttpInfo(temperatureId, temperaturePut);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update temperature sensor Update a temperature sensor from its given &#x60;{temperatureId}&#x60;.
        /// </summary>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temperatureId">ID of the temperature sensor</param>
        /// <param name="temperaturePut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateDevice200Response</returns>
        public clipapisdk.Client.ApiResponse<UpdateDevice200Response> UpdateTemperatureWithHttpInfo(string temperatureId, TemperaturePut? temperaturePut = default(TemperaturePut?), int operationIndex = 0)
        {
            // verify the required parameter 'temperatureId' is set
            if (temperatureId == null)
            {
                throw new clipapisdk.Client.ApiException(400, "Missing required parameter 'temperatureId' when calling TemperatureApi->UpdateTemperature");
            }

            clipapisdk.Client.RequestOptions localVarRequestOptions = new clipapisdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = clipapisdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = clipapisdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("temperatureId", clipapisdk.Client.ClientUtils.ParameterToString(temperatureId)); // path parameter
            localVarRequestOptions.Data = temperaturePut;

            localVarRequestOptions.Operation = "TemperatureApi.UpdateTemperature";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (HueApplicationKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hue-application-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("hue-application-key", this.Configuration.GetApiKeyWithPrefix("hue-application-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<UpdateDevice200Response>("/clip/v2/resource/temperature/{temperatureId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTemperature", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update temperature sensor Update a temperature sensor from its given &#x60;{temperatureId}&#x60;.
        /// </summary>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temperatureId">ID of the temperature sensor</param>
        /// <param name="temperaturePut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateDevice200Response</returns>
        public async System.Threading.Tasks.Task<UpdateDevice200Response> UpdateTemperatureAsync(string temperatureId, TemperaturePut? temperaturePut = default(TemperaturePut?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            clipapisdk.Client.ApiResponse<UpdateDevice200Response> localVarResponse = await UpdateTemperatureWithHttpInfoAsync(temperatureId, temperaturePut, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update temperature sensor Update a temperature sensor from its given &#x60;{temperatureId}&#x60;.
        /// </summary>
        /// <exception cref="clipapisdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temperatureId">ID of the temperature sensor</param>
        /// <param name="temperaturePut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateDevice200Response)</returns>
        public async System.Threading.Tasks.Task<clipapisdk.Client.ApiResponse<UpdateDevice200Response>> UpdateTemperatureWithHttpInfoAsync(string temperatureId, TemperaturePut? temperaturePut = default(TemperaturePut?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'temperatureId' is set
            if (temperatureId == null)
            {
                throw new clipapisdk.Client.ApiException(400, "Missing required parameter 'temperatureId' when calling TemperatureApi->UpdateTemperature");
            }


            clipapisdk.Client.RequestOptions localVarRequestOptions = new clipapisdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = clipapisdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = clipapisdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("temperatureId", clipapisdk.Client.ClientUtils.ParameterToString(temperatureId)); // path parameter
            localVarRequestOptions.Data = temperaturePut;

            localVarRequestOptions.Operation = "TemperatureApi.UpdateTemperature";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (HueApplicationKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hue-application-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("hue-application-key", this.Configuration.GetApiKeyWithPrefix("hue-application-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<UpdateDevice200Response>("/clip/v2/resource/temperature/{temperatureId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTemperature", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
